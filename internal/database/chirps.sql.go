// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chirps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (id, message, user_id, created_at, updated_at)
VALUES (gen_random_uuid(), $1, $2, now(), now())
RETURNING id, message, user_id, created_at, updated_at
`

type CreateChirpParams struct {
	Message string
	UserID  uuid.UUID
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Message, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChirpById = `-- name: DeleteChirpById :exec
Delete from chirps where id = $1 and user_id = $2
`

type DeleteChirpByIdParams struct {
	ChirpID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) DeleteChirpById(ctx context.Context, arg DeleteChirpByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteChirpById, arg.ChirpID, arg.UserID)
	return err
}

const getAllChirps = `-- name: GetAllChirps :many
SELECT id, message, user_id, created_at, updated_at FROM chirps
ORDER By created_at ASC
`

func (q *Queries) GetAllChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllChirpsByAuthor = `-- name: GetAllChirpsByAuthor :many
SELECT id, message, user_id, created_at, updated_at FROM chirps
WHERE user_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetAllChirpsByAuthor(ctx context.Context, userID uuid.UUID) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirpsByAuthor, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpById = `-- name: GetChirpById :one
select id, message, user_id, created_at, updated_at from chirps where id = $1
`

func (q *Queries) GetChirpById(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirpById, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeAllChirps = `-- name: RemoveAllChirps :exec
TRUNCATE TABLE chirps RESTART IDENTITY
`

func (q *Queries) RemoveAllChirps(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeAllChirps)
	return err
}
