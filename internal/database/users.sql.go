// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (gen_random_uuid(), now(), now(), $1, $2)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getByEmail = `-- name: GetByEmail :one
Select email, hashed_password, id, created_at, updated_at from users
where email = $1
`

type GetByEmailRow struct {
	Email          string
	HashedPassword string
	ID             uuid.UUID
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) GetByEmail(ctx context.Context, email string) (GetByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getByEmail, email)
	var i GetByEmailRow
	err := row.Scan(
		&i.Email,
		&i.HashedPassword,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeAllUsers = `-- name: RemoveAllUsers :exec
Delete from users
`

func (q *Queries) RemoveAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeAllUsers)
	return err
}

const updateUser = `-- name: UpdateUser :one
update users set email = $1, hashed_password = $2, updated_at = now()
where id = $3
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type UpdateUserParams struct {
	Email    string
	Password string
	ID       uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.Password, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeUser = `-- name: UpgradeUser :one
update users set is_chirpy_red = $1
where id = $2
RETURNING id
`

type UpgradeUserParams struct {
	IsChirpyRed bool
	ID          uuid.UUID
}

func (q *Queries) UpgradeUser(ctx context.Context, arg UpgradeUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, upgradeUser, arg.IsChirpyRed, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
